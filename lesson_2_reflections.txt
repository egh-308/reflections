What happens when you initialize a repository? Why do you need to do it?

An empty git repository is created with the file .git (hidden). This file allows 
commit tracking for the files that are contained within this repository.  


How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area allows files to be initialized for commit changes.  Once the 
changes are made, in the fashion the user determines, they can be added to the 
repository reflecting the most current commits. The repository also contains the 
history of all the commits for the project. The working directory is the directory 
that contains files that can be moved to and from the staging area and then committed 
to the repository.  Any changes that occur in the directory are left as pending (*) 
changes that have yet to be committed.
 

How can you use the staging area to make sure you have one commit per logical change?

By using the commands git diff, you can verify that only one logical change per file 
is present.  The git diff command will allow you to see the possible difference(s) 
between the staged area and the working directory.  The git diff - -staged command 
allows you to view the difference between the staged area and the repository.  


What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

Branches are helpful when you want to deviate from the master program.  Such 
circumstances can include experimenting with programming that potentially negatively 
affect the original programming, creating different modes for games (easy, normal, 
hard), creating different languages (such as Russian, German, and English versions) 
for programs, and for pretty much any changes that are uniquely different and separate 
from the original programming.  Branches help maintain the integrity of the original 
program while allowing for the safety of creating different and experimental versions 
along the way. 


How do the diagrams help you visualize the branch structure?

The diagrams give you a logical structure that allows you to track the specific 
branches, their history, and where they are relative to the master branch.  This 
allows for the proper implementation of the branches (such as updating the label vs. 
merging) by knowing exactly how current commits factor into the overall structure.  


What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?

The result of merging two branches is that both branches merge back into the master 
branch, with the tip of the master branch becoming the most recent commit.  All 
the prior commits are maintained, but they are displayed in the order they were 
committed in time (as two parent nodes become part of the master)  The merging of 
two branches is represented the way it is to show branch nodes that deviate from 
the master (indented and color coded) and when these branches are merged back into 
the master branch (non-indented). 


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of merging automatically is that is saves time by making a merge quick and 
almost effortless when there are no overlapping changes made in the separate files.  
The con is that auto merge is that Git may choose incorrect code to merge, thus 
causing compile/run issues.  The pro to manual merge is the developer has complete 
control over which coding to keep and discard (esp in the case of conflicts).  The con
is that is can be a slow and tedious process. 